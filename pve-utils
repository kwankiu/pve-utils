#!/bin/bash
################################################################
# ______ _   _ _____       _   _ _____ _____ _      _____      #
# | ___ \ | | |  ___|     | | | |_   _|_   _| |    /  ___|     #
# | |_/ / | | | |__ ______| | | | | |   | | | |    \ `--.      #
# |  __/| | | |  __|______| | | | | |   | | | |     `--. \     #
# | |   \ \_/ / |___      | |_| | | |  _| |_| |____/\__/ /     #
# \_|    \___/\____/       \___/  \_/  \___/\_____/\____/      #                                                
#                                                              #
################################################################                                          
# Define main / dev branch
branch=main
################################################################
# Define variables

kernel=$(uname -sr)
arch=$(uname -m)
vcpu=$(nproc)
memfree=$(free -h | grep "Mem:" | awk '{print $4}' | sed 's\Gi\\g')
swapfree=$(free -h | grep "Swap:" | awk '{print $4}' | sed 's\Gi\\g')
memtotal=$(free -h | grep "Mem:" | awk '{print $2}' | sed 's\Gi\\g')
swaptotal=$(free -h | grep "Swap:" | awk '{print $2}' | sed 's\Gi\\g')

################################################################
# Tools for formatting / styling

# Define terminal color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;36m'
ORANGE='\033[0;38;5;208m'
NC='\033[0m' # No Color

# Option Picker
function select_option {

    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

# Echo with colors
colorecho() {
    color="$1"
    text="$2"
    echo -e "${color}${text}${NC}"
}

# Title / Heading
title() {
  clear
  text="$1"
  echo "---------------------------------------------------------------------"
  colorecho "$ORANGE" "${text}"
  echo "---------------------------------------------------------------------"
}

titleart() {
  clear
  colorecho "$ORANGE" "---------------------------------------------------------------------"
  colorecho "$ORANGE" "______ _   _ _____       _   _ _____ _____ _      _____  "
  colorecho "$ORANGE" "| ___ \ | | |  ___|     | | | |_   _|_   _| |    /  ___| "
  colorecho "$ORANGE" "| |_/ / | | | |__ ______| | | | | |   | | | |    \ .--.  "
  colorecho "$ORANGE" "|  __/| | | |  __|______| | | | | |   | | | |     .--. \ "
  colorecho "$ORANGE" "| |   \ \_/ / |___      | |_| | | |  _| |_| |____/\__/ / "
  colorecho "$ORANGE" "\_|    \___/\____/       \___/  \_/  \___/\_____/\____/  "
  echo
  colorecho "$ORANGE" "---------------------------------------------------------------------"
}

################################################################
# Internet Connection Check
internet_retry_count=0

check_internet() {
    colorecho "$YELLOW" "Checking internet connection..."
    titleart
    servers=("google.com" "1.1.1.1" "114.114.114.114") # ping Google, Cloudflare and China Mobile DNS (for China users)
    internet_available=false

    for server in "${servers[@]}"; do
        if ping -q -c 3 "$server" >/dev/null; then
            colorecho "$GREEN" "Internet is available via $server."
            internet_available=true
            break
        fi
    done

    if ! "$internet_available"; then
        if [ "$internet_retry_count" -gt 3 ]; then
            colorecho "$RED" "Your system does not appear to have internet connection."
            colorecho "$YELLOW" "This installer requires internet connection. Do you want to try install anyway?"
            options=("Check Internet Again" "Try Install Anyway" "Exit Installer")
            select_option "${options[@]}"
            answer=$?
            if [ "$answer" = 0 ]; then
                check_internet
            elif [ "$answer" = 2 ]; then
                echo "Aborted. Exiting ..."
                exit 1
            fi
        else
            colorecho "$GREEN" "Waiting for internet connection ..."
            sleep 3
            colorecho "$GREEN" "Retrying ..."
            check_internet
            ((internet_retry_count++))
        fi
    fi
}

################################################################
# About this Utility

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    colorecho "$ORANGE" "Proxmox VE Helper Utility"
    echo "Usage: pve-utils <options> --ARGUMENTS=<value> or -FLAGS"

    colorecho "$GREEN" "Options"
    echo "-h / --help : Usage and Infomation of this Utility."
    echo "-d / --dev : Use latest dev version of this Utility."
    echo "-i / --install <channel> : Install latest utility to PATH (/usr/bin). install channel options: main, dev."

    colorecho "$GREEN" "Create VM / LXC"
    echo "create : Show create VM/LXC utility menu."
    echo "To be updated."
    exit 1
fi

################################################################
# Main

titleart

# Check internet connection
check_internet

# Check if the script is being run with root privileges
if [[ $EUID -ne 0 ]]; then
    colorecho "$RED" "Error : This script must run as root"
    exit 1
fi

colorecho "$YELLOW" "WARNING: This utility is currently under heavy development, most of the feature may not be available."
colorecho "$ORANGE" "Kernel: $kernel"
colorecho "$ORANGE" "Arch: $arch"
colorecho "$ORANGE" "vCPU (Threads): $vcpu"
colorecho "$ORANGE" "System Memory: $memfree GB free / $memtotal GB total ($(awk "BEGIN{printf \"%.2f%%\\n\", (1-(${memfree}/${memtotal}))*100}") used)"
colorecho "$ORANGE" "System Swap: $swapfree GB free / $swaptotal GB total ($(awk "BEGIN{printf \"%.2f%%\\n\", (1-(${swapfree}/${swaptotal}))*100}") used)"
colorecho "$ORANGE" "---------------------------------------------------------------------"

colorecho "$ORANGE" "Quick Start (ONLY DO THIS IN A FRESH INSTALL):"

options=("1. Setup as Server / NAS")
options+=("2. Setup as Gaming / Media HomeLab")
options+=("3. Run Post Install Setup Only")
options+=("Exit PVE Utility (pve-utils)")

select_option "${options[@]}"
de_options=$?

case $de_options in
                0)
                    colorecho "$GREEN" "Setting up as Server / NAS ..."
                    echo "Coming Soon"
                    ;;
                1)
                    colorecho "$GREEN" "Setting up as Gaming / Media HomeLab ..."
                    echo "Coming Soon"
                    ;;
                2)
                    colorecho "$GREEN" "Running Post Install Script ..."
                    colorecho "$ORANGE" "Script provided by Helper-Scripts.com (https://github.com/tteck/Proxmox)"
                    bash -c "$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/post-pve-install.sh)"
                    ;;
                3)
                    colorecho "$ORANGE" "Exiting PVE Utility ..."
                    exit 1
                    ;;
                *)
                    colorecho "$RED" "UNKNOWN ERROR"
                    exit 1
                    ;;
esac

################################################################
# KILL THIS SCRIPT IF ENDED
exit 1
################################################################

main_menu() {
colorecho "$ORANGE" "Select an option:"

options=("1. Proxmox VE Post Install")
options+=("2. Setup GPU Passthrough")
options+=("3. Setup GPU Passthrough")
options+=("4. Setup Docker LXC (and Portainer)")
options+=("5. Create New Linux (LXC)")
options+=("6. Create New Linux (VM)")
options+=("7. Create New Windows (VM)")
options+=("8. Create New macOS (VM)")
options+=("9. Setup Home Assistant OS (VM)")
options+=("10. Setup Home Assistant Core (LXC)")
options+=("11. Setup Cloudflared (LXC)")
options+=("12. Setup Wireguard (LXC)")
options+=("13. Setup OpenWRT (VM)")
options+=("14. Setup DSM (Xpenology VM)")

options+=("Exit PVE Utility (pve-utils)")

select_option "${options[@]}"
de_options=$?

case $de_options in
                0)
                    colorecho "$ORANGE" "Script provided by Helper-Scripts.com (https://github.com/tteck/Proxmox)"
                    colorecho "$GREEN" "Running Post Install Script ..."
                    bash -c "$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/post-pve-install.sh)"
                    ;;
                1)
                    colorecho "$GREEN" "Running Setup GPU Passthrough ..."
                    echo "Coming Soon 2"
                    ;;
                2)
                    colorecho "$GREEN" "Running Setup GPU Passthrough ..."
                    echo "Coming Soon 3"
                    ;;
                3)
                    colorecho "$ORANGE" "Script provided by Helper-Scripts.com (https://github.com/tteck/Proxmox)"
                    colorecho "$GREEN" "Running Docker LXC Script (Alpine Linux LXC + Docker + Optional Portainer + Optional Compose) ..."
                    bash -c "$(wget -qO - https://github.com/tteck/Proxmox/raw/main/ct/alpine-docker.sh)"
                    ;;
                6)
                    colorecho "$ORANGE" "Setup Windows VM"
                    colorecho "$ORANGE" "Coming Soon"
                    # ISO : Windows 10, 11, Tiny10, Tiny11
                    # Enable GPU Passthrough?
                    # Download Virtio?
                    # Disk : VFIO, Virtio-blk, Emulated NVMe, SATA
                    # CPU Cores
                    # Memory (if pci used then disable balloon)
                    # SMBIOS and UUID (use host SMBIOS and UUID to keep Windows Activation)
                    # Auto Start

                    colorecho "$GREEN" ""
                    ;;
                7)
                    colorecho "$ORANGE" "Setup macOS VM"
                    colorecho "$ORANGE" "Coming Soon"
                    colorecho "$GREEN" ""
                    ;;
                8)
                    colorecho "$ORANGE" "Setup Home Assistant OS"
                    colorecho "$ORANGE" "Script provided by Helper-Scripts.com (https://github.com/tteck/Proxmox)"
                    colorecho "$GREEN" "Running Home Assistant OS VM Script ..."
                    bash -c "$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/vm/haos-vm.sh)"
                    ;;
                9)
                    colorecho "$ORANGE" "Setup Home Assistant Core"
                    colorecho "$ORANGE" "Script provided by Helper-Scripts.com (https://github.com/tteck/Proxmox)"
                    colorecho "$GREEN" "Running Home Assistant Core LXC Script ..."
                    bash -c "$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/homeassistant-core.sh)"
                    ;;
                10)
                    colorecho "$ORANGE" "Script provided by Helper-Scripts.com (https://github.com/tteck/Proxmox)"
                    colorecho "$GREEN" "Running Cloudflared LXC Script ..."
                    bash -c "$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/cloudflared.sh)"
                    ;;
                11)
                    colorecho "$ORANGE" "Script provided by Helper-Scripts.com (https://github.com/tteck/Proxmox)"
                    colorecho "$GREEN" "Running Wireguard LXC Script ..."
                    bash -c "$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/wireguard.sh)"
                    ;;
                12)
                    colorecho "$ORANGE" "Script provided by Helper-Scripts.com (https://github.com/tteck/Proxmox)"
                    colorecho "$GREEN" "Running OpenWRT LXC Script ..."
                    bash -c "$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/vm/openwrt.sh)"
                    ;;
                13)
                    colorecho "$ORANGE" "Setup Xpenology DSM"
                    colorecho "$ORANGE" "Coming Soon"
                    #Select DSM Model
                    ;;
                *)
                    colorecho "$ORANGE" "Coming Soon"
                    exit 1
                    ;;
esac
}

################################################################