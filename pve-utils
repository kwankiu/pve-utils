#!/bin/bash
################################################################
# ______ _   _ _____       _   _ _____ _____ _      _____      #
# | ___ \ | | |  ___|     | | | |_   _|_   _| |    /  ___|     #
# | |_/ / | | | |__ ______| | | | | |   | | | |    \ `--.      #
# |  __/| | | |  __|______| | | | | |   | | | |     `--. \     #
# | |   \ \_/ / |___      | |_| | | |  _| |_| |____/\__/ /     #
# \_|    \___/\____/       \___/  \_/  \___/\_____/\____/      #                                                
#                                                              #
################################################################                                          
# Define main / dev branch
branch=main
################################################################
# Define variables

kernel=$(uname -sr)
arch=$(uname -m)
vcpu=$(nproc)
memfree=$(free -h | grep "Mem:" | awk '{print $4}' | sed 's\Gi\\g')
swapfree=$(free -h | grep "Swap:" | awk '{print $4}' | sed 's\Gi\\g')
memtotal=$(free -h | grep "Mem:" | awk '{print $2}' | sed 's\Gi\\g')
swaptotal=$(free -h | grep "Swap:" | awk '{print $2}' | sed 's\Gi\\g')

################################################################
# Tools for formatting / styling

# Define terminal color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;36m'
ORANGE='\033[0;38;5;208m'
NC='\033[0m' # No Color

# Option Picker
function select_option {

    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;    fi
                         if [[ $key = $ESC[B ]]; then echo down;  fi
                         if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

# Echo with colors
colorecho() {
    color="$1"
    text="$2"
    echo -e "${color}${text}${NC}"
}

# Title / Heading
title() {
  clear
  text="$1"
  echo "---------------------------------------------------------------------"
  colorecho "$ORANGE" "${text}"
  echo "---------------------------------------------------------------------"
}

titleart() {
  clear
  colorecho "$ORANGE" "---------------------------------------------------------------------"
  colorecho "$ORANGE" "______ _   _ _____       _   _ _____ _____ _      _____  "
  colorecho "$ORANGE" "| ___ \ | | |  ___|     | | | |_   _|_   _| |    /  ___| "
  colorecho "$ORANGE" "| |_/ / | | | |__ ______| | | | | |   | | | |    \ .--.  "
  colorecho "$ORANGE" "|  __/| | | |  __|______| | | | | |   | | | |     .--. \ "
  colorecho "$ORANGE" "| |   \ \_/ / |___      | |_| | | |  _| |_| |____/\__/ / "
  colorecho "$ORANGE" "\_|    \___/\____/       \___/  \_/  \___/\_____/\____/  "
  echo
  colorecho "$ORANGE" "---------------------------------------------------------------------"
}

################################################################
# Internet Connection Check
internet_retry_count=0

check_internet() {
    colorecho "$YELLOW" "Checking internet connection..."
    titleart
    servers=("google.com" "1.1.1.1" "114.114.114.114") # ping Google, Cloudflare and China Mobile DNS (for China users)
    internet_available=false

    for server in "${servers[@]}"; do
        if ping -q -c 3 "$server" >/dev/null; then
            colorecho "$GREEN" "Internet is available via $server."
            internet_available=true
            break
        fi
    done

    if ! "$internet_available"; then
        if [ "$internet_retry_count" -gt 3 ]; then
            colorecho "$RED" "Your system does not appear to have internet connection."
            colorecho "$YELLOW" "This installer requires internet connection. Do you want to try install anyway?"
            options=("Check Internet Again" "Try Install Anyway" "Exit Installer")
            select_option "${options[@]}"
            answer=$?
            if [ "$answer" = 0 ]; then
                check_internet
            elif [ "$answer" = 2 ]; then
                echo "Aborted. Exiting ..."
                exit 1
            fi
        else
            colorecho "$GREEN" "Waiting for internet connection ..."
            sleep 3
            colorecho "$GREEN" "Retrying ..."
            check_internet
            ((internet_retry_count++))
        fi
    fi
}

archived_for_use() {
    # Download and install arch-rock-config
    attempt=0
    until [ -f /usr/bin/arch-rock-config ] || [ "$attempt" -ge 5 ]; do
        colorecho "$GREEN" "Installing Configuration Utility (arch-rock-config) ..."
        sleep 3
        cd /usr/bin
        curl -LJO https://raw.githubusercontent.com/kwankiu/archlinux-installer-rock5/$branch/tools/arch-rock-config
        ((attempt++))
    done
    chmod +x arch-rock-config

    colorecho "$GREEN" "Adding 7ji archrepo ..."
    arch-rock-config add-7ji
    pacman -Syy

    if [ -e "/etc/systemd/system/init-setup.service" ]; then 
        systemctl disable init-setup.service
        rm -rf /etc/systemd/system/init-setup.service
    fi

    mkdir -p /etc/systemd/system/getty@tty1.service.d
    echo -e "[Service]\nExecStart=\nExecStart=-/sbin/agetty -o '-p -f -- \\u' --noclear --autologin $new_username %I \$TERM" | tee /etc/systemd/system/getty@tty1.service.d/autologin.conf
    echo "installer" | tee -a /home/$new_username/.bashrc

    colorecho "$GREEN" "Rebooting..."
    systemctl reboot
    reboot
}

################################################################
# About this Installer

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    colorecho "$ORANGE" "Proxmox VE Utilities"
    echo "Usage: pve-utils <optional_argument>"

    colorecho "$GREEN" "Options"
    echo "-h / --help : Usage and Infomation of this utility"
    exit 1
elif [ "$1" = "--create-init-setup-service" ]; then
    #echo -e "[Unit]\nDescription=Initial System Setup\nAfter=network.target\nBefore=sshd.service systemd-logind.service getty@tty1.service\n\n[Service]\nType=oneshot\nTTYPath=/dev/tty13\nExecStartPre=/usr/bin/chvt 13\nExecStart=/usr/bin/installer\nExecStartPost=/usr/bin/chvt 1\nTimeoutStartSec=0\nStandardInput=tty\nTTYVHangup=yes\nTTYVTDisallocate=yes\n\n[Install]\nWantedBy=default.target\nRequiredBy=sshd.service systemd-logind.service getty@tty1.service" | tee /etc/systemd/system/init-setup.service && systemctl enable init-setup.service
    exit 1
fi

################################################################
# Main

titleart

# Check internet connection
check_internet

# Check if the script is being run with root privileges
if [[ $EUID -ne 0 ]]; then
    colorecho "$RED" "Error : This script must run as root"
    exit 1
fi

colorecho "$YELLOW" "WARNING: This utility is currently under heavy development, most of the feature may not be available."
colorecho "$ORANGE" "Kernel: $kernel"
colorecho "$ORANGE" "Arch: $arch"
colorecho "$ORANGE" "vCPU (Threads): $vcpu"
colorecho "$ORANGE" "System Memory: $memfree free / $memtotal total ($((100 - (memfree * 100 / memtotal))) % used)"
colorecho "$ORANGE" "System Swap: $(free -h | grep "Swap:" | awk '{print $4 " free / " $2 " total (" (100-(($4/$2)*100))  "% used)"}' | sed 's\Gi\GiB\g')"
colorecho "$ORANGE" "---------------------------------------------------------------------"
colorecho "$ORANGE" "Select an option:"

options=("1. Proxmox VE Post Install")
options+=("2. Setup GPU Passthrough")
options+=("3. Setup GPU Passthrough")
options+=("4. Setup Docker LXC (and Portainer)")
options+=("5. Create New Linux (LXC)")
options+=("6. Create New Linux (VM)")
options+=("7. Create New Windows (VM)")
options+=("8. Create New macOS (VM)")
options+=("9. Setup Home Assistant OS (VM)")
options+=("10. Setup Home Assistant Core (LXC)")
options+=("11. Setup Cloudflared (LXC)")
options+=("12. Setup Wireguard (LXC)")
options+=("13. Setup OpenWRT (VM)")
options+=("14. Setup DSM (Xpenology VM)")

options+=("Exit PVE Utility (pve-utils)")

select_option "${options[@]}"
de_options=$?

case $de_options in
                0)
                    colorecho "$ORANGE" "Script provided by Helper-Scripts.com (https://github.com/tteck/Proxmox)"
                    colorecho "$GREEN" "Running Post Install Script ..."
                    bash -c "$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/misc/post-pve-install.sh)"
                    ;;
                1)
                    colorecho "$GREEN" "Running Setup GPU Passthrough ..."
                    echo "Coming Soon 2"
                    ;;
                2)
                    colorecho "$GREEN" "Running Setup GPU Passthrough ..."
                    echo "Coming Soon 3"
                    ;;
                3)
                    colorecho "$ORANGE" "Script provided by Helper-Scripts.com (https://github.com/tteck/Proxmox)"
                    colorecho "$GREEN" "Running Docker LXC Script (Alpine Linux LXC + Docker + Optional Portainer + Optional Compose) ..."
                    bash -c "$(wget -qO - https://github.com/tteck/Proxmox/raw/main/ct/alpine-docker.sh)"
                    ;;
                6)
                    colorecho "$ORANGE" "Setup Windows VM"
                    colorecho "$ORANGE" "Coming Soon"
                    # ISO : Windows 10, 11, Tiny10, Tiny11
                    # Enable GPU Passthrough?
                    # Download Virtio?
                    # Disk : VFIO, Virtio-blk, Emulated NVMe, SATA
                    # CPU Cores
                    # Memory (if pci used then disable balloon)
                    # SMBIOS and UUID (use host SMBIOS and UUID to keep Windows Activation)
                    # Auto Start

                    colorecho "$GREEN" ""
                    ;;
                7)
                    colorecho "$ORANGE" "Setup macOS VM"
                    colorecho "$ORANGE" "Coming Soon"
                    colorecho "$GREEN" ""
                    ;;
                8)
                    colorecho "$ORANGE" "Setup Home Assistant OS"
                    colorecho "$ORANGE" "Script provided by Helper-Scripts.com (https://github.com/tteck/Proxmox)"
                    colorecho "$GREEN" "Running Home Assistant OS VM Script ..."
                    bash -c "$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/vm/haos-vm.sh)"
                    ;;
                9)
                    colorecho "$ORANGE" "Setup Home Assistant Core"
                    colorecho "$ORANGE" "Script provided by Helper-Scripts.com (https://github.com/tteck/Proxmox)"
                    colorecho "$GREEN" "Running Home Assistant Core LXC Script ..."
                    bash -c "$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/homeassistant-core.sh)"
                    ;;
                10)
                    colorecho "$ORANGE" "Script provided by Helper-Scripts.com (https://github.com/tteck/Proxmox)"
                    colorecho "$GREEN" "Running Cloudflared LXC Script ..."
                    bash -c "$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/cloudflared.sh)"
                    ;;
                11)
                    colorecho "$ORANGE" "Script provided by Helper-Scripts.com (https://github.com/tteck/Proxmox)"
                    colorecho "$GREEN" "Running Wireguard LXC Script ..."
                    bash -c "$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/ct/wireguard.sh)"
                    ;;
                12)
                    colorecho "$ORANGE" "Script provided by Helper-Scripts.com (https://github.com/tteck/Proxmox)"
                    colorecho "$GREEN" "Running OpenWRT LXC Script ..."
                    bash -c "$(wget -qLO - https://github.com/tteck/Proxmox/raw/main/vm/openwrt.sh)"
                    ;;
                13)
                    colorecho "$ORANGE" "Setup Xpenology DSM"
                    colorecho "$ORANGE" "Coming Soon"
                    #Select DSM Model
                    ;;
                *)
                    colorecho "$ORANGE" "Coming Soon"
                    exit 1
                    ;;
esac

################################################################
# END OF THIS SCRIPT
exit 1
################################################################
# JUST SOME CODE FOR COPY AND PASTE IN CASE THESE ARE USEFUL

title "Arch Rock Installer - Language"

    lclist=$(arch-rock-config locale list-available)
    netlang=$(curl -s https://ipapi.co/languages)
    network_lang=()
    IFS=',' read -ra network_lang <<< "$netlang"
    colorecho "$GREEN" "Let's begin with setting up your language, is that right?"
    colorecho "$GREEN" "Suggested Languages are:"
    echo
    options=()
    for ((i = 0; i < ${#network_lang[@]}-1; i++)); do
        options+=("${network_lang[$i]}")
    done
    sgdindx=$i
    options+=("More Languages" "Skip setting Language")
    select_option "${options[@]}"
    choice=$?

    if [ "$choice" = "$sgdindx" ]; then
        title "Arch Rock Installer - Language (More Options)"
        select_option "${langopt[@]}"
        choice=$?
        if [ "$choice" = 0 ]; then
            langchoice=("${langchi[@]}") # Chinese
        elif [ "$choice" = 1 ]; then
            langchoice=("${langeng[@]}") # English
        elif [ "$choice" = 2 ]; then
            langchoice=("${langspa[@]}") # Spanish
        elif [ "$choice" = 3 ]; then
            langchoice=("${langfre[@]}") # French
        elif [ "$choice" = 4 ]; then
            langchoice=("${langger[@]}") # German
        elif [ "$choice" = 5 ]; then
            langchoice=("${langara[@]}") # Arabic
        else
            title "Arch Rock Installer - Language (Others - sort by continents)"
            select_option "${langcon[@]}"
            choice=$?
            if [ "$choice" = 0 ]; then
                langchoice=("${langconas[@]}") # Asia
            elif [ "$choice" = 1 ]; then
                langchoice=("${langconeu[@]}") # Europe
            elif [ "$choice" = 2 ]; then
                langchoice=("${langconam[@]}") # Americas
            elif [ "$choice" = 3 ]; then
                langchoice=("${langconaf[@]}") # Africa
            elif [ "$choice" = 4 ]; then
                langchoice=("${langconother[@]}") # Others
            fi
        fi
        title "Arch Rock Installer - Language (More Options)"
        select_option "${langchoice[@]}"
        choice=$?
        echo "Set Language to ${langchoice[$choice]%% (*}"
        arch-rock-config locale generate ${langchoice[$choice]%% (*} -y
    elif [ "$choice" -ge "$sgdindx" ]; then
        echo "Skipping ..."
    else
        echo "Set Language to ${options[$choice]}"
        arch-rock-config locale generate ${options[$choice]} -y
    fi

################################################################
# Time Zone

title "Arch Rock Installer - Time Zone"

    ntz=$(arch-rock-config time network-time-zone)
    colorecho "$GREEN" "Your time zone is: $ntz"
    colorecho "$GREEN" "Is that correct?"
    echo

    options=("Yes, this is correct" "No, let me correct my Time Zone" "Skip setting Time Zone")
    select_option "${options[@]}"
    choice=$?

    if [ "$choice" = 0 ]; then
        arch-rock-config "time" set-time-zone sync
    elif [ "$choice" = 1 ]; then
        arch-rock-config "time" set-time-zone
    fi

################################################################
# Select desktop environment

title "Arch Rock Installer - Desktop Environment"
colorecho "$GREEN" "Select a desktop environment to install :"
echo

options=("Gnome" "KDE Plasma" "Budgie" "Sway" "Cutefish" "Deepin" "XFCE" "LXQt" "LXDE" "MATE" "Cinnamon")
options+=("Skip")

select_option "${options[@]}"
de_options=$?

################################################################
# Install Linux Kernel

title "Arch Rock Installer - Installing Linux Kernel"

    oldkrlrel=$(uname -r)
    kernelpkg="linux-radxa-rkbsp5-git"
    yes y|sudo pacman -S --overwrite \* $kernelpkg $kernelpkg-headers

    if sudo pacman -Qs $kernelpkg > /dev/null ; then
        colorecho "$GREEN" "Removing Old Kernel Modules ..."
        sudo rm -rf /boot/dtbs/$oldkrlrel /lib/modules/$oldkrlrel
    else
        sudo pacman -S --overwrite \* $kernelpkg $kernelpkg-headers
        if sudo pacman -Qs $kernelpkg > /dev/null ; then
            colorecho "$GREEN" "Removing Old Kernel Modules ..."
            sudo rm -rf /boot/dtbs/$oldkrlrel /lib/modules/$oldkrlrel
        else
            colorecho "$RED" "Error: Failed to Install Linux Kernel"
            colorecho "$RED" "Installation can not be continued, exiting ..."
            exit 1
        fi
    fi

    colorecho "$GREEN" "Installing DKMS Packages ..."
    arch-rock-config install "r8125-dkms-git" "8852bu-dkms-git" "8852be-dkms-git" 

    colorecho "$YELLOW" "Updating extlinux.conf ..."
    # apply new extlinux.conf
    sudo mv /boot/extlinux/extlinux.arch.template /boot/extlinux/extlinux.conf

    # Get rootfs partition from the current mount point "/"
    rootfs_partition=$(mount | grep "on / " | awk '{print $1}')

    # Find the UUIDs of the root partition
    root_uuid=$(sudo blkid $rootfs_partition | awk '{print $2}' | tr -d '"')
    echo "Root partition UUID: $root_uuid"

    # Change UUID for extlinux.conf
    colorecho "$GREEN" "Updating UUID for extlinux.conf ..."
    
    sudo sed -i "s|UUID=\\*\\*CHANGEME\\*\\*|$root_uuid|" /boot/extlinux/extlinux.conf
    sudo sed -i "s|UUID=CHANGEME|$root_uuid|" /boot/extlinux/extlinux.conf

    if grep -qF "/boot vfat dmask=000,fmask=0111,user 0 0" /etc/fstab; then
        echo "Done"
    else
        colorecho "$GREEN" "Updating paths for extlinux.conf ..."
        sudo sed -i "s| /vmlinuz| /boot/vmlinuz|" /boot/extlinux/extlinux.conf
        sudo sed -i "s| /initramfs| /boot/initramfs|" /boot/extlinux/extlinux.conf
        sudo sed -i "s| /initrd| /boot/initrd|" /boot/extlinux/extlinux.conf
        sudo sed -i "s| /dtbs| /boot/dtbs|" /boot/extlinux/extlinux.conf
        sudo sed -i "s| /dtbo| /boot/dtbo|" /boot/extlinux/extlinux.conf
    fi

################################################################
# Install Mesa and GPU drivers

title "Arch Rock Installer - Installing Mesa and GPU drivers"

    sudo pacman -S mesa-panfork-git --noconfirm

################################################################
# Install Video Acceleration

title "Arch Rock Installer - Installing Video Acceleration"

    sudo pacman -S mpp-git ffmpeg4.4-mpp ffmpeg-mpp --noconfirm

################################################################
# Post Installation

title "Arch Rock Installer - Post Installation"

colorecho "$GREEN" "Performing Full System Upgrade ..."
sudo pacman -Syyu --noconfirm

# The fix for some Bluetooth Modules (A8, AX210, etc.)
colorecho "$GREEN" "Applying Bluetooth Fix ..."
echo -e "blacklist pgdrv\nblacklist btusb\nblacklist btrtl\nblacklist btbcm\n#blacklist btintel" | sudo tee -a /etc/modprobe.d/blacklist.conf

# Network Manager, WiFi, Bluetooth
colorecho "$GREEN" "Installing network manager and bluetooth ..."
sudo pacman -S networkmanager iw bluez --noconfirm

colorecho "$GREEN" "Enabling network manager and bluetooth service ..."
sudo systemctl enable NetworkManager.service
sudo systemctl start NetworkManager.service
sudo systemctl enable bluetooth.service
sudo systemctl start bluetooth.service

################################################################
# Install desktop environment

title "Arch Rock Installer - Install desktop environment"

# Install desktop environment
if [ "$de_options" = 0 ]; then
    # Install Gnome
    colorecho "$GREEN" "Installing Gnome ..."
    sudo pacman -S gnome --noconfirm
    #GDM_CONFIG_FILE="/etc/gdm/custom.conf"
    #if [ -f "$GDM_CONFIG_FILE" ]; then
        #sudo sed -i 's/^#WaylandEnable/WaylandEnable=false/' "$GDM_CONFIG_FILE"
        #echo "Wayland has been disabled for GDM."
    #else
        #echo "GDM configuration file ($GDM_CONFIG_FILE) not found."
    #fi
    sudo systemctl enable gdm
elif [ "$de_options" = 1 ]; then
    # Install KDE Plasma
    colorecho "$GREEN" "Installing KDE Plasma ..."
    sudo pacman -S plasma-desktop sddm --noconfirm
    sudo systemctl enable sddm
elif [ "$de_options" = 2 ]; then
    # Install Budgie
    colorecho "$GREEN" "Installing Budgie ..."
    sudo pacman -S budgie-desktop gdm gnome-keyring gnome-control-center gnome-terminal gnome-tweak-tool nautilus --noconfirm
    sudo systemctl enable gdm
elif [ "$de_options" = 3 ]; then
    # Install Sway
    colorecho "$GREEN" "Installing Sway ..."
    sudo pacman -S sway wofi lxappearance qt5ct python-pywal waybar pcmanfm-qt pass dunst swayidle swaylock swaybg xorg-xwayland qt5-wayland foot sddm --noconfirm
    sudo systemctl enable sddm
    sudo mkdir -p .config/{sway,dunst,waybar,wofi}
    sudo install -Dm755 /etc/sway/config ~/.config/sway/config
    sudo install -Dm755 /etc/dunst/dunstrc ~/.config/dunst/dunstrc
    sudo touch ~/.config/waybar/config
    sudo touch ~/.config/wofi/config
elif [ "$de_options" = 4 ]; then
    # Install Cutefish
    colorecho "$GREEN" "Installing Cutefish ..."
    sudo pacman -S cutefish sddm --noconfirm
    sudo systemctl enable sddm
elif [ "$de_options" = 5 ]; then
    # Install Deepin
    colorecho "$GREEN" "Installing Deepin ..."
    sudo pacman -S deepin deepin-extra --noconfirm
    echo -e "greeter-session=lightdm-deepin-greeter" | sudo tee /etc/lightdm/lightdm.conf
elif [ "$de_options" = 6 ]; then
    # Install XFCE
    colorecho "$GREEN" "Installing XFCE ..."
    sudo pacman -S xfce4 xfce4-goodies gdm --noconfirm
    sudo systemctl enable gdm
elif [ "$de_options" = 7 ]; then
    # Install LXQT
    colorecho "$GREEN" "Installing LXQT ..."
    sudo pacman -S lxqt sddm --noconfirm
    sudo systemctl enable sddm
elif [ "$de_options" = 8 ]; then
    # Install LXDE
    colorecho "$GREEN" "Installing LXDE ..."
    sudo pacman -S lxde lxdm-gtk3 --noconfirm
    sudo systemctl enable lxdm
elif [ "$de_options" = 9 ]; then
    # Install MATE
    colorecho "$GREEN" "Installing MATE ..."
    sudo pacman -S mate mate-extra gdm --noconfirm
    sudo systemctl enable gdm
elif [ "$de_options" = 10 ]; then
    # Install Cinnamon
    colorecho "$GREEN" "Installing Cinnamon ..."
    sudo pacman -S cinnamon cinnamon-translations nemo-fileroller nemo-image-converter nemo-preview xed xreader gnome-terminal metacity gnome-shell gdm --noconfirm
    sudo systemctl enable gdm
else
    colorecho "$YELLOW" "Skipping install desktop environment ..."
fi

################################################################
# Install additional packages

colorecho "$GREEN" "Starting additional packages installer ..."
arch-rock-config install --installer

################################################################
# Installation clean up

title "Arch Rock Installer - Installation Finished"

# Detect the current username
current_username=$(whoami)

# Check if "installer" exists in .bashrc
if sudo grep -q "installer" /home/$current_username/.bashrc; then
    # Remove "installer" from .bashrc
    sudo sed -i '/installer/d' /home/$current_username/.bashrc
    sudo rm -rf /etc/systemd/system/getty@tty1.service.d/autologin.conf
fi

# Prompt user to reboot
read -t 5 -p "Changes have been made. We will reboot your system in 5 seconds. Do you want to reboot now? (y/n): " reboot_choice

if [[ "$reboot_choice" == "n" || "$reboot_choice" == "N" ]]; then
    echo "You may manually reboot later to apply the changes."
    echo "To remove this installer, run sudo rm -rf /usr/bin/installer"
else
    colorecho "$GREEN" "Cleaning up installations ..."
    sudo rm -rf /usr/bin/installer
    colorecho "$GREEN" "Rebooting system ..."
    sudo reboot
fi

################################################################